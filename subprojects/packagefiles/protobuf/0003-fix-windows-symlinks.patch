Source: https://github.com/mesonbuild/wrapdb/pull/2212
--- a/src/meson.build
+++ b/src/meson.build
@@ -1,10 +1,14 @@
 
 python = find_program('python3')
 proto_includes_link = custom_target(
-  'proto_includes_link',
   input: files('symlink.py'),
   output: 'include',  # directory adjacent to protoc binary
-  command: [python, '@INPUT@', meson.current_source_dir(), '@OUTPUT@'],
+  command: [
+    python,
+    files('symlink_or_copy.py'),
+    meson.current_source_dir(),
+    '@OUTPUT@'
+  ],
 )
 proto_includes_link_dep = declare_dependency(
   sources: proto_includes_link,
--- a/src/symlink.py
+++ b/src/symlink.py
@@ -1,40 +0,0 @@
-#!/usr/bin/env python3
-
-"""
-Helper-script, a replacement to unix `ln -s [target] [alias]` command
-should work everywhere where meson does
-"""
-
-import os
-import sys
-from pathlib import Path
-
-
-def main(argv: [str]) -> int:
-    """Your script main entry point"""
-
-    if len(sys.argv) != 3:
-        print(f"Usage: {argv[0]} [target] [alias]")
-        return -1
-
-    target = Path(sys.argv[1])
-    alias = Path(sys.argv[2])
-    alias_dir = alias.absolute().parent
-
-    if not target.exists():
-        print("Target not found at:", target.absolute())
-        return -2
-    if not alias_dir.exists():
-        print("Alias directory not found at:", alias_dir)
-        return -3
-
-    rtarget = Path(os.path.relpath(target.absolute(), alias_dir))
-    print(f"creating symlink {alias} -> {rtarget}")
-    if alias.is_symlink():
-        alias.unlink()
-    alias.symlink_to(rtarget, target_is_directory=target.is_dir())
-
-    return 0
-
-if __name__ == "__main__":
-    sys.exit(main(sys.argv))
--- a/src/symlink_or_copy.py
+++ b/src/symlink_or_copy.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+
+"""
+Helper-script, a replacement to unix
+`ln -s [source] [destination] || cp -r [source] [destination]` command
+should work everywhere where meson does
+"""
+
+import argparse
+import os
+import platform
+import shutil
+import sys
+from pathlib import Path
+
+
+def main() -> int:
+    """Your script main entry point"""
+
+    parser = argparse.ArgumentParser()
+    parser.add_argument("source")
+    parser.add_argument("destination")
+    args = parser.parse_args()
+
+    source = Path(args.source)
+    destination = Path(args.destination)
+    destination_parent = destination.absolute().parent
+
+    if not source.exists():
+        print("Source not found at:", source.absolute())
+        return -2
+    if not destination_parent.exists():
+        print("Destination directory not found at:", destination_parent)
+        return -3
+
+    relative_target = Path(os.path.relpath(source.absolute(), destination_parent))
+    print(f"creating symlink {destination} -> {relative_target}")
+    if destination.is_symlink():
+        destination.unlink()
+    elif destination.is_dir():
+        shutil.rmtree(destination)
+    try:
+        destination.symlink_to(relative_target, target_is_directory=source.is_dir())
+    except OSError as exc:
+        # 1314: A required privilege is not held by the client.
+        # Windows raises these errors when the script doesn't have
+        # sufficient (administrator) priviledges and Developer mode
+        # is not enabled (which enables regular users to create
+        # symlinks).
+        if platform.system() == "Windows" and exc.winerror == 1314:
+            try:
+                shutil.copytree(source, destination)
+            except (FileNotFoundError, NotADirectoryError, PermissionError) as exc:
+                print(exc, file=sys.stderr)
+                return -4
+        else:
+            print(exc, file=sys.stderr)
+            return -4
+    except (FileNotFoundError, PermissionError) as exc:
+        print(exc, file=sys.stderr)
+        return -4
+
+    return 0
+
+
+if __name__ == "__main__":
+    sys.exit(main())
